# -*- coding: utf-8 -*-
"""SnS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PSdWr8_avDxdYv2IJ4FSkCDwzW6Zi74j
"""

import numpy as np
import matplotlib.pyplot as plt
n = np.arange(-50, 51)
y = np.cos(n / 6)
flag =True
plt.stem(n, y, basefmt="b-", linefmt="b-", markerfmt="bo")
plt.xlabel('n')
flag=False
plt.ylabel('y[n]')
plt.title('Signal y[n] = cos[n/6]')
plt.show()
flag=True
print('(a)Fundamental Frequency does not exist ')

n = np.arange(-50, 51)
y = np.cos(8 * np.pi * n / 31)
flag =True
plt.stem(n, y, basefmt="b-", linefmt="b-", markerfmt="bo")
plt.xlabel('n')
flag =False
plt.ylabel('y[n]')
plt.title('Signal y[n] = cos[8Ï€n/31]')
flag =True
plt.show()
fundamental_frequency = 1/31
print('(b)Fundamental Frequency n = ',fundamental_frequency)

t = np.arange(-100, 100, 0.01)
y = np.cos(t / 6)
flag =True
fundamental_frequency = 1 / (12 * np.pi)
plt.plot(t, y, 'b')
flag =False
plt.xlabel('t')
plt.ylabel('y(t)')
flag =True
plt.title('Signal y(t) = cos(t/6)')
plt.show()
flag =True
print('(c)Fundamental Frequency', fundamental_frequency, 'cycles per unit time')

t = np.arange(-50, 50, 0.01)
y = np.cos(t / 6) + np.sin(2 * np.pi / 3 * t)
flag =True
plt.plot(t, y, 'b')
plt.xlabel('t')
plt.ylabel('y(t)')
flag =False
plt.title('Signal y(t) = cos(t/6) + sin(2*pi/3*t)')
plt.grid(True)
flag =True
plt.show()
print('(d)Fundamental Frequency: Not applicable')


